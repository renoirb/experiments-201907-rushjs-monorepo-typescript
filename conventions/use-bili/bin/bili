#!/usr/bin/env node
'use strict'

/**
 * In Rush.js, if we do not use this script, we would need to import
 * the required module in EVERY PACKAGES.
 * This exposes it for other modules to use.
 */

// See comment also @renoirb/conventions-use-jest in reporter.js #IsCiServer
// https://docs.gitlab.com/ee/ci/variables/#syntax-of-environment-variables-in-job-scripts
const processEnvKeys = Object.keys(process.env)
const isCI = processEnvKeys.includes('CI_SERVER')
// process.stdout.write('isCI ' + JSON.stringify(isCI))

if (isCI) {
  // When in CI mode, make bili not output log output
  // Otherwise rush will tell it had warning.
  // We can avoid inserting --quiet from ALL packages and then have to tweak
  // lines for when we're in development mode and want to run the same command and
  // we might want to see such console logs locally.
  process.argv.push('--quiet')
} else {
  process.argv.push('--verbose')
}

/**
 * rel=#bundleNodeModulesBili
 * For the moment, only support toggling inlining when CLI argument is present.
 * Refer to #bundleNodeModulesBili in src/plugins.ts to learn the reasoning.
 */
const hasBiliBundleNodeModulesOption = process.argv.includes(
  '--bundle-node-modules',
)
if (hasBiliBundleNodeModulesOption) {
  process.env.BILI_BUNDLE_NODE_MODULES = 'true'
}

const hasTargetBiliArgument = process.argv.includes('--target')
const indexOfTargetBiliArgument = hasTargetBiliArgument
  ? process.argv.indexOf('--target')
  : 0

let BROWSERSLIST = null

const BROWSERLISTTARGETS = {
  // @TODO Harmonize with other places we'd tell runtime target
  browser: 'ie >= 10, > 1%', // IE10+, and when a browser worldwide usage is more than 1%
  // browser: 'last 2 Chrome versions', // ONLY MODERN
  // node: 'node 0.10' // When Node.js target, old version from 2016 https://nodejs.org/en/download/releases/
  node: 'node 10', // Node.js Long Term Support of 2019
}

/**
 * Change process.env.BROWSERSLIST accordingly to --target CLI argument
 *
 * Following up experiment;
 * https://github.com/renoirb/experiments-201907-bili-babel-preset-env-multiple-target-builds#using-browserslist
 */
if (hasTargetBiliArgument) {
  const targetIndex = indexOfTargetBiliArgument + 1
  const targetKey = process.argv[targetIndex] || null
  BROWSERSLIST = Reflect.has(BROWSERLISTTARGETS, targetKey)
    ? Reflect.get(BROWSERLISTTARGETS, targetKey)
    : null
  // If we superseeded BROWSERSLIST environment, use it instead.
  // Since we already have it, let's not superseed it.
  // set -gx BROWSERSLIST "ie >= 10, > 1%"
  // set -gx BROWSERSLIST "node 10"
  // export BROWSERSLIST "ie >= 10, > 1%"
  // export BROWSERSLIST "node 10"
  if (!('BROWSERSLIST' in process.env) && typeof BROWSERSLIST === 'string') {
    process.env.BROWSERSLIST = BROWSERSLIST
  }
  // console.log('BROWSERSLIST', BROWSERSLIST)
}

if (!!process.env.BROWSERSLIST) {
  const feedback = `Target BROWSERSLIST: "${process.env.BROWSERSLIST}"`
  process.stdout.write(`\n${feedback}\n`)
}

Promise.all([require('bili/dist/cli')])
